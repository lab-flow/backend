# Generated by Django 5.0 on 2024-01-02 10:33

import django.contrib.auth.models
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import reagents.validators
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClpClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classification', models.CharField(blank=True, max_length=40)),
                ('clp_classification', models.CharField(max_length=5, validators=[reagents.validators.ClpClassificationValidator()])),
                ('hazard_group', models.CharField(choices=[('PHY', 'Zagrożenia fizyczne'), ('HEA', 'Zagrożenia dla zdrowia'), ('ENV', 'Zagrożenia dla środowiska'), ('ADD', 'Dodatkowe zagrożenia')], max_length=3)),
            ],
            options={
                'db_table': 'reagents_clp_classification',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Concentration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concentration', models.CharField(max_length=20, unique=True)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Pictogram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pictogram', models.ImageField(unique=True, upload_to='Pictograms')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PrecautionaryStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=30, validators=[reagents.validators.PrecautionaryStatementCodeValidator()])),
                ('phrase', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'db_table': 'reagents_precautionary_statement',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('producer_name', models.CharField(max_length=100)),
                ('brand_name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=25)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PurityQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purity_quality', models.CharField(max_length=30, unique=True)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
            options={
                'db_table': 'reagents_purity_quality',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ReagentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50, unique=True)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
            options={
                'db_table': 'reagents_reagent_type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='StorageCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_condition', models.CharField(max_length=30, unique=True)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
            options={
                'db_table': 'reagents_storage_condition',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(max_length=5, unique=True)),
                ('is_validated_by_admin', models.BooleanField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Użytkownik z taką nazwą już istnieje.'}, help_text='Wymagane. 2 to 4 liter. Tylko wielkie litery z polskiego alfabetu.', max_length=4, unique=True, validators=[reagents.validators.PolishAlphabetUsernameValidator()], verbose_name='nazwa użytkownika (inicjały)')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('lab_roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('LM', 'Kierownik laboratorium'), ('PM', 'Kierownik projektu (procedury)'), ('LW', 'Pracownik laboratorium')], max_length=2), blank=True, default=list, size=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['id'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HazardStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hazard_class', models.CharField(max_length=100)),
                ('hazard_category', models.CharField(max_length=50)),
                ('hazard_and_category_code', models.CharField(max_length=30)),
                ('signal_word', models.CharField(blank=True, choices=[('DGR', 'Niebezpieczeństwo (danger)'), ('WRN', 'Uwaga')], max_length=3)),
                ('code', models.CharField(blank=True, max_length=30, validators=[reagents.validators.HazardStatementCodeValidator()])),
                ('phrase', models.CharField(blank=True, max_length=200)),
                ('is_usage_record_required', models.BooleanField()),
                ('clp_classification', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.clpclassification')),
                ('pictogram', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reagents.pictogram')),
            ],
            options={
                'db_table': 'reagents_hazard_statement',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalClpClassification',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('classification', models.CharField(blank=True, max_length=40)),
                ('clp_classification', models.CharField(max_length=5, validators=[reagents.validators.ClpClassificationValidator()])),
                ('hazard_group', models.CharField(choices=[('PHY', 'Zagrożenia fizyczne'), ('HEA', 'Zagrożenia dla zdrowia'), ('ENV', 'Zagrożenia dla środowiska'), ('ADD', 'Dodatkowe zagrożenia')], max_length=3)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical clp classification',
                'verbose_name_plural': 'historical clp classifications',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalConcentration',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('concentration', models.CharField(db_index=True, max_length=20)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical concentration',
                'verbose_name_plural': 'historical concentrations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPictogram',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('pictogram', models.CharField(db_index=True, max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical pictogram',
                'verbose_name_plural': 'historical pictograms',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPrecautionaryStatement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=30, validators=[reagents.validators.PrecautionaryStatementCodeValidator()])),
                ('phrase', models.CharField(blank=True, max_length=200)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical precautionary statement',
                'verbose_name_plural': 'historical precautionary statements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProducer',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('producer_name', models.CharField(max_length=100)),
                ('brand_name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=25)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical producer',
                'verbose_name_plural': 'historical producers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProjectProcedure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical project procedure',
                'verbose_name_plural': 'historical project procedures',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPurityQuality',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('purity_quality', models.CharField(db_index=True, max_length=30)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical purity quality',
                'verbose_name_plural': 'historical purity qualitys',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReagent',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('catalog_no', models.CharField(max_length=50)),
                ('volume', models.PositiveIntegerField()),
                ('safety_data_sheet', models.CharField(max_length=100)),
                ('safety_instruction', models.CharField(blank=True, max_length=100)),
                ('safety_instruction_name', models.CharField(blank=True, max_length=6, validators=[reagents.validators.SafetyInstructionNameValidator()])),
                ('safety_data_sheet_name', models.CharField(blank=True, max_length=7, validators=[reagents.validators.SafetyDataSheetNameValidator()])),
                ('cas_no', models.CharField(blank=True, max_length=50)),
                ('other_info', models.CharField(blank=True, max_length=200)),
                ('kit_contents', models.CharField(blank=True, max_length=300)),
                ('is_usage_record_required', models.BooleanField()),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('concentration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.concentration')),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('producer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.producer')),
                ('purity_quality', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.purityquality')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.reagenttype')),
                ('unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.unit')),
            ],
            options={
                'verbose_name': 'historical reagent',
                'verbose_name_plural': 'historical reagents',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReagentType',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(db_index=True, max_length=50)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical reagent type',
                'verbose_name_plural': 'historical reagent types',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStorageCondition',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('storage_condition', models.CharField(db_index=True, max_length=30)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical storage condition',
                'verbose_name_plural': 'historical storage conditions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUnit',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('unit', models.CharField(db_index=True, max_length=5)),
                ('is_validated_by_admin', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical unit',
                'verbose_name_plural': 'historical units',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'Użytkownik z taką nazwą już istnieje.'}, help_text='Wymagane. 2 to 4 liter. Tylko wielkie litery z polskiego alfabetu.', max_length=4, validators=[reagents.validators.PolishAlphabetUsernameValidator()], verbose_name='nazwa użytkownika (inicjały)')),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('lab_roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('LM', 'Kierownik laboratorium'), ('PM', 'Kierownik projektu (procedury)'), ('LW', 'Pracownik laboratorium')], max_length=2), blank=True, default=list, size=None)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PersonalReagent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_critical', models.BooleanField()),
                ('lot_no', models.CharField(max_length=20)),
                ('receipt_purchase_date', models.DateField()),
                ('expiration_date', models.DateField()),
                ('disposal_utilization_date', models.DateField(blank=True, default=None, null=True)),
                ('laboratory', models.CharField(choices=[('LGM', 'LGM'), ('LG', 'LG')], max_length=3)),
                ('room', models.CharField(max_length=8)),
                ('detailed_location', models.CharField(blank=True, max_length=20)),
                ('is_usage_record_generated', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('user_comment', models.CharField(blank=True, max_length=200)),
                ('main_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reagents_personal_reagent',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalReagentRequest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(choices=[('AA', 'Oczekiwanie na akceptację'), ('AP', 'Zaakceptowano'), ('RE', 'Odrzucono')], default='AA', max_length=2)),
                ('change_status_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('requester_comment', models.CharField(blank=True, max_length=200)),
                ('responder_comment', models.CharField(blank=True, max_length=200)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('personal_reagent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.personalreagent')),
            ],
            options={
                'verbose_name': 'historical reagent request',
                'verbose_name_plural': 'historical reagent requests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHazardStatement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('hazard_class', models.CharField(max_length=100)),
                ('hazard_category', models.CharField(max_length=50)),
                ('hazard_and_category_code', models.CharField(max_length=30)),
                ('signal_word', models.CharField(blank=True, choices=[('DGR', 'Niebezpieczeństwo (danger)'), ('WRN', 'Uwaga')], max_length=3)),
                ('code', models.CharField(blank=True, max_length=30, validators=[reagents.validators.HazardStatementCodeValidator()])),
                ('phrase', models.CharField(blank=True, max_length=200)),
                ('is_usage_record_required', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('clp_classification', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.clpclassification')),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('pictogram', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.pictogram')),
            ],
            options={
                'verbose_name': 'historical hazard statement',
                'verbose_name_plural': 'historical hazard statements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ProjectProcedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_validated_by_admin', models.BooleanField()),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='manager_project_procedure_set', to=settings.AUTH_USER_MODEL)),
                ('workers', models.ManyToManyField(related_name='workers_project_procedure_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reagents_project_procedure',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='personalreagent',
            name='project_procedure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reagents.projectprocedure'),
        ),
        migrations.CreateModel(
            name='HistoricalProjectProcedure_workers',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='reagents.historicalprojectprocedure')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('projectprocedure', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.projectprocedure')),
            ],
            options={
                'verbose_name': 'HistoricalProjectProcedure_workers',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Reagent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('catalog_no', models.CharField(max_length=50)),
                ('volume', models.PositiveIntegerField()),
                ('safety_data_sheet', models.FileField(upload_to='SafetyDataSheets')),
                ('safety_instruction', models.FileField(blank=True, upload_to='SafetyInstructions')),
                ('safety_instruction_name', models.CharField(blank=True, max_length=6, validators=[reagents.validators.SafetyInstructionNameValidator()])),
                ('safety_data_sheet_name', models.CharField(blank=True, max_length=7, validators=[reagents.validators.SafetyDataSheetNameValidator()])),
                ('cas_no', models.CharField(blank=True, max_length=50)),
                ('other_info', models.CharField(blank=True, max_length=200)),
                ('kit_contents', models.CharField(blank=True, max_length=300)),
                ('is_usage_record_required', models.BooleanField()),
                ('is_validated_by_admin', models.BooleanField()),
                ('concentration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reagents.concentration')),
                ('hazard_statements', models.ManyToManyField(blank=True, to='reagents.hazardstatement')),
                ('precautionary_statements', models.ManyToManyField(blank=True, to='reagents.precautionarystatement')),
                ('producer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.producer')),
                ('purity_quality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reagents.purityquality')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.reagenttype')),
                ('storage_conditions', models.ManyToManyField(to='reagents.storagecondition')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.unit')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='personalreagent',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.reagent'),
        ),
        migrations.CreateModel(
            name='HistoricalReagent_precautionary_statements',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='reagents.historicalreagent')),
                ('precautionarystatement', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.precautionarystatement')),
                ('reagent', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.reagent')),
            ],
            options={
                'verbose_name': 'HistoricalReagent_precautionary_statements',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReagent_hazard_statements',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('hazardstatement', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.hazardstatement')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='reagents.historicalreagent')),
                ('reagent', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.reagent')),
            ],
            options={
                'verbose_name': 'HistoricalReagent_hazard_statements',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPersonalReagent',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('is_critical', models.BooleanField()),
                ('lot_no', models.CharField(max_length=20)),
                ('receipt_purchase_date', models.DateField()),
                ('expiration_date', models.DateField()),
                ('disposal_utilization_date', models.DateField(blank=True, default=None, null=True)),
                ('laboratory', models.CharField(choices=[('LGM', 'LGM'), ('LG', 'LG')], max_length=3)),
                ('room', models.CharField(max_length=8)),
                ('detailed_location', models.CharField(blank=True, max_length=20)),
                ('is_usage_record_generated', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('user_comment', models.CharField(blank=True, max_length=200)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('main_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('project_procedure', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.projectprocedure')),
                ('reagent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.reagent')),
            ],
            options={
                'verbose_name': 'historical personal reagent',
                'verbose_name_plural': 'historical personal reagents',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ReagentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('AA', 'Oczekiwanie na akceptację'), ('AP', 'Zaakceptowano'), ('RE', 'Odrzucono')], default='AA', max_length=2)),
                ('change_status_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('requester_comment', models.CharField(blank=True, max_length=200)),
                ('responder_comment', models.CharField(blank=True, max_length=200)),
                ('personal_reagent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reagents.personalreagent')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reagents_reagent_request',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalReagent_storage_conditions',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='reagents.historicalreagent')),
                ('reagent', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.reagent')),
                ('storagecondition', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reagents.storagecondition')),
            ],
            options={
                'verbose_name': 'HistoricalReagent_storage_conditions',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
